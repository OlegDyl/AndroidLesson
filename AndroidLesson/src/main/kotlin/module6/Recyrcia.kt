package module6

fun main() {

   /*                                           Рекурсия

  Задачи:
  - рассмотреть особенности рекурсии
  - научиться создавать собственные рекурсии

  Рекурсия - способ организации обработки данных, при котором программа или функция вызывает сама себя напрямую,
  либо с помощью других программ.

  Любой итеративный алгоритм может быть представлен в виде рекурсии.

  А каждая рекурсия может быть представлена в виде цикла

  fun calculateSum(n: Int): Int {
        return if (n == 0) 0
        else n + calculateSum(n - 1)
  }
 */
    var n = readLine()?.toIntOrNull() ?: return

    printNumbers(n)  // функция записана внизу



/*                                     Стек вызова

    Стек вызовов - это стек, хранящий информацию для возврата управления из функции в программу при вложенных или
    рекурсивных вызовах.

    При вызове функции в стек заносятся адрес возврата (адрес в памяти следующей инструкции приостанавливаемой программы),
    а управление передается функции. При последующем рекурсивном вызове в стек заносятся очередной адрес возврата и
    так далее.

    При возврате из функции адрес возврата снимается из стека, и управление передается на следующую инструкцию
    приостановленной программы.

     
 */

    println(calculateSum(n))

/*  Рекурсия
    Плюсы:
    Функция воспринимается лучше цикла
    В виде рекурсии некоторые задачи описать намного легче

    Пример:
    Сканирование каталогов компьютера. Из-за большого количества динамических переменных и вложенных структур такую
    задачу проще решить, используя рекурсию.


                              Хвостовая рекурсия и модификатор tailrec
    Хвостовая рекурсия - частный случай рекурсии, при котором рекурсивный вызов является последней операцией перед
    возвратом из функции.

    Модификатор tailrec применяется для оптимизации рекурсии компилятором. Этот модификатор оптимизирует рекурсию,
    превращая код в более эффективный, основанный на циклах.
    */



}

fun printNumbers(number: Int): Int {
    return if (number >0) {
        println(number)
        printNumbers(number - 1)
    }
    else 0
}

fun calculateSum(n: Int): Int {
    if (n == 0) return 0
    return n + calculateSum(n - 1)
}
