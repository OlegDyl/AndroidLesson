package Object

fun main() {

/*                                                  Объекты

    Цели:
    - что такое объект-синглтон
    - что такое объект-компаньон


                                        Объект-синглтон(singleton obgect)
    Синглтон - объект, который существует в единственном экземпляре во время работы программы
    - Состоит из полей и методов
    - Нельзя создавать экземпляр
    - Обращение к полям и методам через имя объекта
    - Могут применяться модификаторы доступа: private, public, internal

    Создадим объект - Эйфилева башня и напишем функции включения и выключения подсветки
 */

    println("Heifht - ${EiffelTower.height}")
    EiffelTower.turnOnBacklights()
    EiffelTower.turnOffBacklights()


/*                                 Объект-компаньон(companion object)

Компаньон - объект, который объявлен внутри тела класса.
- состоит из полей и методов
- нельзя создавать экземпляр
- может не иметь имен
- обращение к полям и методам через имя класса, в котором он объявлен
- могут применяться модификаторы доступа

Для объявления необходимо указать companion object, имя такому объекту можно не указывать, а обращаться к полям такого
объекта можно будет через имя класса, внутри которого он объявлен.
По соглашениям companion object объявляется в самом низу класса


  //  В классе Car создадим companion object, а внутри опишем одну константу и функция которая определяет класс
  //  автомобиля по его размерам.

 Внутри компаньонов обычно размещают поля и функции которые тесно связаны с классом, но при этом для доступа к этим палям
 экземпляр не нужен, там содержится какая-то общая информация, константы или вспомогательные функции.
 Обращение к константам, функциям и остальным членам компаньона, происходит так же через имя класса и не зависит от
 экземпляров класса, а через экземпляр к компаньону доступа нет. Например, давайте выведем нашу константу с количеством
 колес в консоль и определим какой класс у автомобиля длинной 3.8 метра
*/
    println("Wheels count - ${Car.wheelsCounr}")
    val classType = Car.getCarClass(3.8) // из компаньона класса Car
    println(classType)

/* При этом давайте попробуем создать экземпляр класса Car*/
    val car = Car("Audi", "A3")
    // car.getCarClass() - к этой функции у нас нет доступа

}

// по команде ctrl + alt + l - автоматическое выравнивание кода
// по команде ctrl + alt + s - выбираем пункт Editor далее Code Style далее Kotlin нажав кнопку слева Set front - мы выбираем
// какие правила код стайла применить